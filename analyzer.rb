#!/usr/bin/env ruby


def parseFile()
	#local_filename = "" #lexeme file
	#lexeme = []
	#File.open(local_filename, 'w') {|f| f.write(doc) }
	#open('a.txt').each do |line|
  	#results << line.split('\n')

  	array_in_line = Array.new

  	array_in_line = ["IDENTIFIER", "ASSIGNOP", "IDENTIFIER", "ADD", "IDENTIFIER"]
  	puts array_in_line
  	evaluate_line(array_in_line)

 	#end
 end



 def evaluate_line(array_in_line)
 	$lexeme = Array.new
 	$lexeme = array_in_line.reverse!
 	puts "Evaluating The Line"
 	puts $lexeme

 	


 	def nextToken()
 		$lexeme.peek
 	end

 	def popToken()
 		$lexeme.pop
 	end	

 	def evaluateNextToken(condition)
		#nextToken =~ /#{condition}/ ? true : false
		if nextToken() =~ /#{condition}/
			popToken()
			return true 
		else
			return false
		end
	end

	#	generated by the rule:   <expr> → <term> {( + | - ) <term>}
	def expr()
		puts "Enter<expr>"
		term
		while (evaluateNextToken("ADD|SUBTRACT")) do
			return term
		end
		puts "Exit<expr>"
	end

	# 	   generated by the rule: <term> → <factor> {( * | / ) <factor> }
	def term() 
		factor
		puts "Enter<term>"
		while (evaluateNextToken("MULT_CODE|DIV_CODE")) do 
			factor
		end
		puts "Exit<term>"
	end

	def error(error)
		puts "#{error}"
	end

	# <factor> -> id  |  (<expr>)
	def factor() 
		puts "Enter<factor>"
		if evaluateNextToken("IDENTIFIER")
			return 
		elsif evaluateNextToken("OPENPAREN")
			if evaluateNextToken("CLOSEPAREN")
				return
			else
				error("Missing Close Parenthesis")	
			end
		else
			error("Right Hand Side Doesn't Match") #Right Hand Side Doesn't Match
		end
		puts "Exit<factor>"
	end
	end
	parseFile()