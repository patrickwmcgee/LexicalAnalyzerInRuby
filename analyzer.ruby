#	/* Function expr parses strings in the language
#	generated by the rule:   <expr> → <term> {( + | - ) <term>}
#	*/

def expr()
    term()
	while (nextToken =~/ADD|SUBTRACT/) do
		term()
	end
end
#	Function term
#	   Parses strings in the language
# 	   generated by the rule: <term> → <factor> {( * | / ) <factor> }


def term() 
  	factor()
	while (evaluateNextToken("MULT_CODE|DIV_CODE")) do 
		factor()
	end
end

end
=begin
/* Function factor
   Parses strings in the language
   generated by the rule: 
   <factor> -> id  |  (<expr>)  
*/

=end
def nextToken()
	lexeme.peek
end

def popToken()
	lexeme.pop
end	

def evaluateNextToken(condition)
	#nextToken =~ /#{condition}/ ? true : false
	if nextToken() =~ /#{condition}/
		popToken()
		return true 
	else
		return false
	end
end


def factor() 
	if evaluateNextToken("IDENTIFIER")
		return 
	elsif evaluateNextToken("OPENPAREN")
		if evaluateNextToken("CLOSEPAREN")
			return
		else
			error()	
		end
	else
		error() #Right Hand Side Doesn't Match
	end
end


